<# /*
This file is part of PDFiumSharp, a wrapper around the PDFium library for the .NET framework.
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/ #>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<# // ------------------------------------------------------ Code Start ------------------------------------------------------
string[] Names = {
	"FPDF_ACTION",
	"FPDF_BITMAP",
	"FPDF_BOOKMARK",
	"FPDF_CLIPPATH",
	"FPDF_DEST",
	"FPDF_DOCUMENT",
	"FPDF_FONT",
	"FPDF_LINK",
	"FPDF_PAGE",
	"FPDF_PAGELINK",
	"FPDF_PAGEOBJECT",  // Page object(text, path, etc)
	"FPDF_PAGERANGE",
	"FPDF_RECORDER",
	"FPDF_SCHHANDLE",
	"FPDF_STRUCTELEMENT",
	"FPDF_STRUCTTREE",
	"FPDF_TEXTPAGE",
	"FPDF_STRINGHANDLE",
	"FPDF_WIDGET" };
// --------------------------------------------------------- Code End ----------------------------------------------------- #>
#region Copyright and License
/*
This file is part of PDFiumSharp, a wrapper around the PDFium library for the .NET framework.
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/
#endregion

// AUTOGENERATED FILE
// DO NOT MODIFY
using System;
using System.Runtime.InteropServices;
using System.Threading;

namespace PDFiumSharp.Types
{
<# // ------------------------------------------------------ Code Start ------------------------------------------------------
foreach (string name in Names)
{
// --------------------------------------------------------- Code End ----------------------------------------------------- #>
	/// <summary>Handle to a <#=name#></summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct <#=name#> : IHandle<<#=name#>>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "<#=name#>: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static <#=name#> Null => new <#=name#>();

		<#=name#>(IntPtr ptr)
		{
			_ptr = ptr;
		}

		<#=name#> IHandle<<#=name#>>.SetToNull() => new <#=name#>(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

<# // ------------------------------------------------------ Code Start ------------------------------------------------------
}
// --------------------------------------------------------- Code End ----------------------------------------------------- #>
}