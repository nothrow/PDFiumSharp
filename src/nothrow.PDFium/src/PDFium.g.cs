#region Copyright and License
/*
This file is part of PDFiumSharp, a wrapper around the PDFium library for the .NET framework.
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/
#endregion

// AUTOGENERATED FILE
// DO NOT MODIFY
using System;
using System.Runtime.InteropServices;
using PDFiumSharp.Types;

namespace PDFiumSharp
{
	public static partial class PDFium
	{
		static readonly object _lock = new object();

		#region FPDF_InitLibrary

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_InitLibrary")]
			internal static extern void FPDF_InitLibrary_x86();

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_InitLibrary")]
			internal static extern void FPDF_InitLibrary_x64();
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_InitLibrary/*'/>
		public static void FPDF_InitLibrary()
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_InitLibrary_x64(); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_InitLibrary_x86(); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_InitLibraryWithConfig

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_InitLibraryWithConfig")]
			internal static extern void FPDF_InitLibraryWithConfig_x86(ref FPDF_LIBRARY_CONFIG config);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_InitLibraryWithConfig")]
			internal static extern void FPDF_InitLibraryWithConfig_x64(ref FPDF_LIBRARY_CONFIG config);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_InitLibraryWithConfig/*'/>
		public static void FPDF_InitLibraryWithConfig(ref FPDF_LIBRARY_CONFIG config)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_InitLibraryWithConfig_x64(ref config); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_InitLibraryWithConfig_x86(ref config); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_DestroyLibrary

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_DestroyLibrary")]
			internal static extern void FPDF_DestroyLibrary_x86();

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_DestroyLibrary")]
			internal static extern void FPDF_DestroyLibrary_x64();
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_DestroyLibrary/*'/>
		public static void FPDF_DestroyLibrary()
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_DestroyLibrary_x64(); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_DestroyLibrary_x86(); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_LoadDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadDocument")]
			internal static extern FPDF_DOCUMENT FPDF_LoadDocument_x86([MarshalAs(UnmanagedType.LPStr)] string file_path, [MarshalAs(UnmanagedType.LPStr)] string password);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadDocument")]
			internal static extern FPDF_DOCUMENT FPDF_LoadDocument_x64([MarshalAs(UnmanagedType.LPStr)] string file_path, [MarshalAs(UnmanagedType.LPStr)] string password);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_LoadDocument/*'/>
		/// <seealso cref='PdfDocument.PdfDocument(string, string)'/>
		public static FPDF_DOCUMENT FPDF_LoadDocument([MarshalAs(UnmanagedType.LPStr)] string file_path, [MarshalAs(UnmanagedType.LPStr)] string password)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_LoadDocument_x64(file_path, password); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_LoadDocument_x86(file_path, password); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_LoadMemDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadMemDocument")]
			internal static extern FPDF_DOCUMENT FPDF_LoadMemDocument_x86(ref byte data_buf, int size, [MarshalAs(UnmanagedType.LPStr)] string password);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadMemDocument")]
			internal static extern FPDF_DOCUMENT FPDF_LoadMemDocument_x64(ref byte data_buf, int size, [MarshalAs(UnmanagedType.LPStr)] string password);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_LoadMemDocument/*'/>
		/// <seealso cref='PdfDocument.PdfDocument(byte[], int, int, string)'/>
		private static FPDF_DOCUMENT FPDF_LoadMemDocument(ref byte data_buf, int size, [MarshalAs(UnmanagedType.LPStr)] string password)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_LoadMemDocument_x64(ref data_buf, size, password); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_LoadMemDocument_x86(ref data_buf, size, password); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_LoadCustomDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadCustomDocument")]
			internal static extern FPDF_DOCUMENT FPDF_LoadCustomDocument_x86(FPDF_FILEREAD fileRead, [MarshalAs(UnmanagedType.LPStr)] string password);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadCustomDocument")]
			internal static extern FPDF_DOCUMENT FPDF_LoadCustomDocument_x64(FPDF_FILEREAD fileRead, [MarshalAs(UnmanagedType.LPStr)] string password);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_LoadCustomDocument/*'/>
		/// <seealso cref='PdfDocument.PdfDocument(System.IO.Stream, int, string)'/>
		public static FPDF_DOCUMENT FPDF_LoadCustomDocument(FPDF_FILEREAD fileRead, [MarshalAs(UnmanagedType.LPStr)] string password)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_LoadCustomDocument_x64(fileRead, password); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_LoadCustomDocument_x86(fileRead, password); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetFileVersion

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetFileVersion")]
			internal static extern bool FPDF_GetFileVersion_x86(FPDF_DOCUMENT doc, out int fileVersion);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetFileVersion")]
			internal static extern bool FPDF_GetFileVersion_x64(FPDF_DOCUMENT doc, out int fileVersion);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetFileVersion/*'/>
		/// <seealso cref='PdfDocument.FileVersion'/>
		public static bool FPDF_GetFileVersion(FPDF_DOCUMENT doc, out int fileVersion)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetFileVersion_x64(doc, out fileVersion); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetFileVersion_x86(doc, out fileVersion); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetLastError

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetLastError")]
			internal static extern FPDF_ERR FPDF_GetLastError_x86();

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetLastError")]
			internal static extern FPDF_ERR FPDF_GetLastError_x64();
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetLastError/*'/>
		public static FPDF_ERR FPDF_GetLastError()
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetLastError_x64(); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetLastError_x86(); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetDocPermissions

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetDocPermissions")]
			internal static extern DocumentPermissions FPDF_GetDocPermissions_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetDocPermissions")]
			internal static extern DocumentPermissions FPDF_GetDocPermissions_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetDocPermissions/*'/>
		/// <seealso cref='PdfDocument.Permissions'/>
		public static DocumentPermissions FPDF_GetDocPermissions(FPDF_DOCUMENT document)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetDocPermissions_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetDocPermissions_x86(document); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetSecurityHandlerRevision

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetSecurityHandlerRevision")]
			internal static extern int FPDF_GetSecurityHandlerRevision_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetSecurityHandlerRevision")]
			internal static extern int FPDF_GetSecurityHandlerRevision_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetSecurityHandlerRevision/*'/>
		/// <seealso cref='PdfDocument.SecurityHandlerRevision'/>
		public static int FPDF_GetSecurityHandlerRevision(FPDF_DOCUMENT document)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetSecurityHandlerRevision_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetSecurityHandlerRevision_x86(document); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetPageCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageCount")]
			internal static extern int FPDF_GetPageCount_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageCount")]
			internal static extern int FPDF_GetPageCount_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageCount/*'/>
		/// <seealso cref='PdfPageCollection.Count'/>
		/// <seealso cref='PdfDocument.Pages'/>
		public static int FPDF_GetPageCount(FPDF_DOCUMENT document)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageCount_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageCount_x86(document); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_LoadPage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadPage")]
			internal static extern FPDF_PAGE FPDF_LoadPage_x86(FPDF_DOCUMENT document, int page_index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadPage")]
			internal static extern FPDF_PAGE FPDF_LoadPage_x64(FPDF_DOCUMENT document, int page_index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_LoadPage/*'/>
		/// <seealso cref='PdfPageCollection[int]'/>
		/// <seealso cref='PdfDocument.Pages'/>
		public static FPDF_PAGE FPDF_LoadPage(FPDF_DOCUMENT document, int page_index)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_LoadPage_x64(document, page_index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_LoadPage_x86(document, page_index); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetPageWidth

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageWidth")]
			internal static extern double FPDF_GetPageWidth_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageWidth")]
			internal static extern double FPDF_GetPageWidth_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageWidth/*'/>
		/// <seealso cref='PdfPage.Width'/>
		public static double FPDF_GetPageWidth(FPDF_PAGE page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageWidth_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageWidth_x86(page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetPageHeight

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageHeight")]
			internal static extern double FPDF_GetPageHeight_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageHeight")]
			internal static extern double FPDF_GetPageHeight_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageHeight/*'/>
		/// <seealso cref='PdfPage.Height'/>
		public static double FPDF_GetPageHeight(FPDF_PAGE page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageHeight_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageHeight_x86(page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetPageSizeByIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageSizeByIndex")]
			internal static extern bool FPDF_GetPageSizeByIndex_x86(FPDF_DOCUMENT document, int page_index, out double width, out double height);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageSizeByIndex")]
			internal static extern bool FPDF_GetPageSizeByIndex_x64(FPDF_DOCUMENT document, int page_index, out double width, out double height);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageSizeByIndex/*'/>
		/// <seealso cref='PdfPage.Size'/>
		public static bool FPDF_GetPageSizeByIndex(FPDF_DOCUMENT document, int page_index, out double width, out double height)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageSizeByIndex_x64(document, page_index, out width, out height); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageSizeByIndex_x86(document, page_index, out width, out height); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_RenderPageBitmap

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_RenderPageBitmap")]
			internal static extern void FPDF_RenderPageBitmap_x86(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotation, RenderingFlags flags);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_RenderPageBitmap")]
			internal static extern void FPDF_RenderPageBitmap_x64(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotation, RenderingFlags flags);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RenderPageBitmap/*'/>
		/// <seealso cref='PdfPage.Render'/>
		public static void FPDF_RenderPageBitmap(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotation, RenderingFlags flags)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_RenderPageBitmap_x64(bitmap, page, start_x, start_y, size_x, size_y, rotation, flags); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_RenderPageBitmap_x86(bitmap, page, start_x, start_y, size_x, size_y, rotation, flags); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_RenderPageBitmapWithMatrix

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_RenderPageBitmapWithMatrix")]
			internal static extern void FPDF_RenderPageBitmapWithMatrix_x86(FPDF_BITMAP bitmap, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipping, RenderingFlags flags);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_RenderPageBitmapWithMatrix")]
			internal static extern void FPDF_RenderPageBitmapWithMatrix_x64(FPDF_BITMAP bitmap, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipping, RenderingFlags flags);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RenderPageBitmapWithMatrix/*'/>
		public static void FPDF_RenderPageBitmapWithMatrix(FPDF_BITMAP bitmap, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipping, RenderingFlags flags)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_RenderPageBitmapWithMatrix_x64(bitmap, page, matrix, clipping, flags); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_RenderPageBitmapWithMatrix_x86(bitmap, page, matrix, clipping, flags); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_ClosePage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_ClosePage")]
			internal static extern void FPDF_ClosePage_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_ClosePage")]
			internal static extern void FPDF_ClosePage_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_ClosePage/*'/>
		/// <seealso cref='PdfDocument.Close'/>
		public static void FPDF_ClosePage(FPDF_PAGE page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_ClosePage_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_ClosePage_x86(page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_CloseDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_CloseDocument")]
			internal static extern void FPDF_CloseDocument_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_CloseDocument")]
			internal static extern void FPDF_CloseDocument_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_CloseDocument/*'/>
		/// <seealso cref='PdfDocument.Close'/>
		public static void FPDF_CloseDocument(FPDF_DOCUMENT document)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_CloseDocument_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_CloseDocument_x86(document); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_DeviceToPage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_DeviceToPage")]
			internal static extern void FPDF_DeviceToPage_x86(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, int device_x, int device_y, out double page_x, out double page_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_DeviceToPage")]
			internal static extern void FPDF_DeviceToPage_x64(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, int device_x, int device_y, out double page_x, out double page_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_DeviceToPage/*'/>
		/// <seealso cref='PdfPage.DeviceToPage((int left, int top, int width, int height), int, int, PageOrientations)'/>
		public static void FPDF_DeviceToPage(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, int device_x, int device_y, out double page_x, out double page_y)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_DeviceToPage_x64(page, start_x, start_y, size_x, size_y, rotate, device_x, device_y, out page_x, out page_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_DeviceToPage_x86(page, start_x, start_y, size_x, size_y, rotate, device_x, device_y, out page_x, out page_y); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_PageToDevice

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_PageToDevice")]
			internal static extern void FPDF_PageToDevice_x86(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, double page_x, double page_y, out int device_x, out int device_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_PageToDevice")]
			internal static extern void FPDF_PageToDevice_x64(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, double page_x, double page_y, out int device_x, out int device_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_PageToDevice/*'/>
		/// <seealso cref='PdfPage.PageToDevice((int left, int top, int width, int height), double, double, PageOrientations)'/>
		public static void FPDF_PageToDevice(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, double page_x, double page_y, out int device_x, out int device_y)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_PageToDevice_x64(page, start_x, start_y, size_x, size_y, rotate, page_x, page_y, out device_x, out device_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_PageToDevice_x86(page, start_x, start_y, size_x, size_y, rotate, page_x, page_y, out device_x, out device_y); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_Create

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_Create")]
			internal static extern FPDF_BITMAP FPDFBitmap_Create_x86(int width, int height, bool hasAlpha);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_Create")]
			internal static extern FPDF_BITMAP FPDFBitmap_Create_x64(int width, int height, bool hasAlpha);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_Create/*'/>
		/// <seealso cref='PDFiumBitmap.PDFiumBitmap(int, int, bool)'/>
		public static FPDF_BITMAP FPDFBitmap_Create(int width, int height, bool hasAlpha)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBitmap_Create_x64(width, height, hasAlpha); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBitmap_Create_x86(width, height, hasAlpha); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_CreateEx

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_CreateEx")]
			internal static extern FPDF_BITMAP FPDFBitmap_CreateEx_x86(int width, int height, BitmapFormats format, IntPtr first_scan, int stride);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_CreateEx")]
			internal static extern FPDF_BITMAP FPDFBitmap_CreateEx_x64(int width, int height, BitmapFormats format, IntPtr first_scan, int stride);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_CreateEx/*'/>
		/// <seealso cref='PDFiumBitmap.PDFiumBitmap(int, int, BitmapFormats, IntPtr, int)'/>
		public static FPDF_BITMAP FPDFBitmap_CreateEx(int width, int height, BitmapFormats format, IntPtr first_scan, int stride)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBitmap_CreateEx_x64(width, height, format, first_scan, stride); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBitmap_CreateEx_x86(width, height, format, first_scan, stride); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_FillRect

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_FillRect")]
			internal static extern void FPDFBitmap_FillRect_x86(FPDF_BITMAP bitmap, int left, int top, int width, int height, FPDF_COLOR color);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_FillRect")]
			internal static extern void FPDFBitmap_FillRect_x64(FPDF_BITMAP bitmap, int left, int top, int width, int height, FPDF_COLOR color);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_FillRect/*'/>
		/// <seealso cref='PDFiumBitmap.FillRectangle(int, int, int, int, FPDF_COLOR)'/>
		/// <seealso cref='PDFiumBitmap.Fill(FPDF_COLOR)'/>
		public static void FPDFBitmap_FillRect(FPDF_BITMAP bitmap, int left, int top, int width, int height, FPDF_COLOR color)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFBitmap_FillRect_x64(bitmap, left, top, width, height, color); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFBitmap_FillRect_x86(bitmap, left, top, width, height, color); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_GetBuffer

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetBuffer")]
			internal static extern IntPtr FPDFBitmap_GetBuffer_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetBuffer")]
			internal static extern IntPtr FPDFBitmap_GetBuffer_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_GetBuffer/*'/>
		/// <seealso cref='PDFiumBitmap.Scan0'/>
		public static IntPtr FPDFBitmap_GetBuffer(FPDF_BITMAP bitmap)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetBuffer_x64(bitmap); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetBuffer_x86(bitmap); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_GetWidth

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetWidth")]
			internal static extern int FPDFBitmap_GetWidth_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetWidth")]
			internal static extern int FPDFBitmap_GetWidth_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_GetWidth/*'/>
		/// <seealso cref='PDFiumBitmap.Width'/>
		public static int FPDFBitmap_GetWidth(FPDF_BITMAP bitmap)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetWidth_x64(bitmap); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetWidth_x86(bitmap); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_GetHeight

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetHeight")]
			internal static extern int FPDFBitmap_GetHeight_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetHeight")]
			internal static extern int FPDFBitmap_GetHeight_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_GetHeight/*'/>
		/// <seealso cref='PDFiumBitmap.Height'/>
		public static int FPDFBitmap_GetHeight(FPDF_BITMAP bitmap)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetHeight_x64(bitmap); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetHeight_x86(bitmap); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_GetStride

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetStride")]
			internal static extern int FPDFBitmap_GetStride_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetStride")]
			internal static extern int FPDFBitmap_GetStride_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_GetStride/*'/>
		/// <seealso cref='PDFiumBitmap.Stride'/>
		public static int FPDFBitmap_GetStride(FPDF_BITMAP bitmap)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetStride_x64(bitmap); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetStride_x86(bitmap); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_Destroy

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_Destroy")]
			internal static extern void FPDFBitmap_Destroy_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_Destroy")]
			internal static extern void FPDFBitmap_Destroy_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_Destroy/*'/>
		/// <seealso cref='PDFiumBitmap.Dispose'/>
		public static void FPDFBitmap_Destroy(FPDF_BITMAP bitmap)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFBitmap_Destroy_x64(bitmap); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFBitmap_Destroy_x86(bitmap); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_VIEWERREF_GetPrintScaling

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_VIEWERREF_GetPrintScaling")]
			internal static extern bool FPDF_VIEWERREF_GetPrintScaling_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_VIEWERREF_GetPrintScaling")]
			internal static extern bool FPDF_VIEWERREF_GetPrintScaling_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_VIEWERREF_GetPrintScaling/*'/>
		/// <seealso cref='PdfDocument.PrintPrefersScaling'/>
		public static bool FPDF_VIEWERREF_GetPrintScaling(FPDF_DOCUMENT document)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetPrintScaling_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetPrintScaling_x86(document); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_VIEWERREF_GetNumCopies

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_VIEWERREF_GetNumCopies")]
			internal static extern int FPDF_VIEWERREF_GetNumCopies_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_VIEWERREF_GetNumCopies")]
			internal static extern int FPDF_VIEWERREF_GetNumCopies_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_VIEWERREF_GetNumCopies/*'/>
		/// <seealso cref='PdfDocument.PrintCopyCount'/>
		public static int FPDF_VIEWERREF_GetNumCopies(FPDF_DOCUMENT document)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetNumCopies_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetNumCopies_x86(document); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_VIEWERREF_GetPrintPageRange

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_VIEWERREF_GetPrintPageRange")]
			internal static extern FPDF_PAGERANGE FPDF_VIEWERREF_GetPrintPageRange_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_VIEWERREF_GetPrintPageRange")]
			internal static extern FPDF_PAGERANGE FPDF_VIEWERREF_GetPrintPageRange_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_VIEWERREF_GetPrintPageRange/*'/>
		public static FPDF_PAGERANGE FPDF_VIEWERREF_GetPrintPageRange(FPDF_DOCUMENT document)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetPrintPageRange_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetPrintPageRange_x86(document); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_VIEWERREF_GetDuplex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_VIEWERREF_GetDuplex")]
			internal static extern DuplexTypes FPDF_VIEWERREF_GetDuplex_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_VIEWERREF_GetDuplex")]
			internal static extern DuplexTypes FPDF_VIEWERREF_GetDuplex_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_VIEWERREF_GetDuplex/*'/>
		/// <seealso cref='PdfDocument.DuplexType'/>
		public static DuplexTypes FPDF_VIEWERREF_GetDuplex(FPDF_DOCUMENT document)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetDuplex_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetDuplex_x86(document); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_VIEWERREF_GetName

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_VIEWERREF_GetName")]
			internal static extern uint FPDF_VIEWERREF_GetName_x86(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint length);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_VIEWERREF_GetName")]
			internal static extern uint FPDF_VIEWERREF_GetName_x64(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint length);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_VIEWERREF_GetName/*'/>
		private static uint FPDF_VIEWERREF_GetName(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint length)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetName_x64(document, key, ref buffer, length); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetName_x86(document, key, ref buffer, length); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_CountNamedDests

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_CountNamedDests")]
			internal static extern int FPDF_CountNamedDests_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_CountNamedDests")]
			internal static extern int FPDF_CountNamedDests_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_CountNamedDests/*'/>
		/// <seealso cref='PdfDestinationCollection.Count'/>
		/// <seealso cref='PdfDocument.Destinations'/>
		public static int FPDF_CountNamedDests(FPDF_DOCUMENT document)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_CountNamedDests_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_CountNamedDests_x86(document); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetNamedDestByName

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetNamedDestByName")]
			internal static extern FPDF_DEST FPDF_GetNamedDestByName_x86(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string name);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetNamedDestByName")]
			internal static extern FPDF_DEST FPDF_GetNamedDestByName_x64(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string name);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetNamedDestByName/*'/>
		/// <seealso cref='PdfDestinationCollection[string]'/>
		/// <seealso cref='PdfDocument.Destinations'/>
		public static FPDF_DEST FPDF_GetNamedDestByName(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string name)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetNamedDestByName_x64(document, name); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetNamedDestByName_x86(document, name); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetNamedDest

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetNamedDest")]
			internal static extern FPDF_DEST FPDF_GetNamedDest_x86(FPDF_DOCUMENT document, int index, IntPtr buffer, out int buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetNamedDest")]
			internal static extern FPDF_DEST FPDF_GetNamedDest_x64(FPDF_DOCUMENT document, int index, IntPtr buffer, out int buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetNamedDest/*'/>
		/// <seealso cref='PDFium.FPDF_GetNamedDest(FPDF_DOCUMENT, int)'/>
		private static FPDF_DEST FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, IntPtr buffer, out int buflen)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetNamedDest_x64(document, index, buffer, out buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetNamedDest_x86(document, index, buffer, out buflen); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetNamedDest

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetNamedDest")]
			internal static extern FPDF_DEST FPDF_GetNamedDest_x86(FPDF_DOCUMENT document, int index, ref byte buffer, ref int buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetNamedDest")]
			internal static extern FPDF_DEST FPDF_GetNamedDest_x64(FPDF_DOCUMENT document, int index, ref byte buffer, ref int buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetNamedDest/*'/>
		/// <seealso cref='PDFium.FPDF_GetNamedDest(FPDF_DOCUMENT, int)'/>
		private static FPDF_DEST FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, ref byte buffer, ref int buflen)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetNamedDest_x64(document, index, ref buffer, ref buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetNamedDest_x86(document, index, ref buffer, ref buflen); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBookmark_GetFirstChild

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBookmark_GetFirstChild")]
			internal static extern FPDF_BOOKMARK FPDFBookmark_GetFirstChild_x86(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBookmark_GetFirstChild")]
			internal static extern FPDF_BOOKMARK FPDFBookmark_GetFirstChild_x64(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBookmark_GetFirstChild/*'/>
		/// <seealso cref='PdfDocument.Bookmarks'/>
		/// <seealso cref='PdfBookmark.Children'/>
		public static FPDF_BOOKMARK FPDFBookmark_GetFirstChild(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetFirstChild_x64(document, bookmark); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetFirstChild_x86(document, bookmark); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBookmark_GetNextSibling

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBookmark_GetNextSibling")]
			internal static extern FPDF_BOOKMARK FPDFBookmark_GetNextSibling_x86(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBookmark_GetNextSibling")]
			internal static extern FPDF_BOOKMARK FPDFBookmark_GetNextSibling_x64(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBookmark_GetNextSibling/*'/>
		/// <seealso cref='PdfDocument.Bookmarks'/>
		/// <seealso cref='PdfBookmark.Children'/>
		public static FPDF_BOOKMARK FPDFBookmark_GetNextSibling(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetNextSibling_x64(document, bookmark); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetNextSibling_x86(document, bookmark); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBookmark_GetTitle

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBookmark_GetTitle")]
			internal static extern uint FPDFBookmark_GetTitle_x86(FPDF_BOOKMARK bookmark, ref byte buffer, uint buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBookmark_GetTitle")]
			internal static extern uint FPDFBookmark_GetTitle_x64(FPDF_BOOKMARK bookmark, ref byte buffer, uint buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBookmark_GetTitle/*'/>
		/// <seealso cref='PDFium.FPDFBookmark_GetTitle(FPDF_BOOKMARK)'/>
		private static uint FPDFBookmark_GetTitle(FPDF_BOOKMARK bookmark, ref byte buffer, uint buflen)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetTitle_x64(bookmark, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetTitle_x86(bookmark, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBookmark_Find

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBookmark_Find")]
			internal static extern FPDF_BOOKMARK FPDFBookmark_Find_x86(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPWStr)] string title);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBookmark_Find")]
			internal static extern FPDF_BOOKMARK FPDFBookmark_Find_x64(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPWStr)] string title);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBookmark_Find/*'/>
		/// <seealso cref='PdfDocument.FindBookmark(string)'/>
		public static FPDF_BOOKMARK FPDFBookmark_Find(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPWStr)] string title)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBookmark_Find_x64(document, title); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBookmark_Find_x86(document, title); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBookmark_GetDest

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBookmark_GetDest")]
			internal static extern FPDF_DEST FPDFBookmark_GetDest_x86(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBookmark_GetDest")]
			internal static extern FPDF_DEST FPDFBookmark_GetDest_x64(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBookmark_GetDest/*'/>
		/// <seealso cref='PdfBookmark.Destination'/>
		public static FPDF_DEST FPDFBookmark_GetDest(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetDest_x64(document, bookmark); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetDest_x86(document, bookmark); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBookmark_GetAction

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBookmark_GetAction")]
			internal static extern FPDF_ACTION FPDFBookmark_GetAction_x86(FPDF_BOOKMARK bookmark);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBookmark_GetAction")]
			internal static extern FPDF_ACTION FPDFBookmark_GetAction_x64(FPDF_BOOKMARK bookmark);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBookmark_GetAction/*'/>
		/// <seealso cref='PdfBookmark.Action'/>
		public static FPDF_ACTION FPDFBookmark_GetAction(FPDF_BOOKMARK bookmark)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetAction_x64(bookmark); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetAction_x86(bookmark); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFAction_GetType

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFAction_GetType")]
			internal static extern ActionTypes FPDFAction_GetType_x86(FPDF_ACTION action);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFAction_GetType")]
			internal static extern ActionTypes FPDFAction_GetType_x64(FPDF_ACTION action);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAction_GetType/*'/>
		/// <seealso cref='PdfAction.Type'/>
		public static ActionTypes FPDFAction_GetType(FPDF_ACTION action)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAction_GetType_x64(action); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAction_GetType_x86(action); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFAction_GetDest

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFAction_GetDest")]
			internal static extern FPDF_DEST FPDFAction_GetDest_x86(FPDF_DOCUMENT document, FPDF_ACTION action);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFAction_GetDest")]
			internal static extern FPDF_DEST FPDFAction_GetDest_x64(FPDF_DOCUMENT document, FPDF_ACTION action);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAction_GetDest/*'/>
		/// <seealso cref='PdfAction.Destination'/>
		public static FPDF_DEST FPDFAction_GetDest(FPDF_DOCUMENT document, FPDF_ACTION action)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAction_GetDest_x64(document, action); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAction_GetDest_x86(document, action); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFAction_GetFilePath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFAction_GetFilePath")]
			internal static extern uint FPDFAction_GetFilePath_x86(FPDF_ACTION action, ref byte buffer, uint buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFAction_GetFilePath")]
			internal static extern uint FPDFAction_GetFilePath_x64(FPDF_ACTION action, ref byte buffer, uint buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAction_GetFilePath/*'/>
		/// <seealso cref='PDFium.FPDFAction_GetFilePath(FPDF_ACTION)'/>
		private static uint FPDFAction_GetFilePath(FPDF_ACTION action, ref byte buffer, uint buflen)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAction_GetFilePath_x64(action, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAction_GetFilePath_x86(action, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFAction_GetURIPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFAction_GetURIPath")]
			internal static extern uint FPDFAction_GetURIPath_x86(FPDF_DOCUMENT document, FPDF_ACTION action, ref byte buffer, uint buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFAction_GetURIPath")]
			internal static extern uint FPDFAction_GetURIPath_x64(FPDF_DOCUMENT document, FPDF_ACTION action, ref byte buffer, uint buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAction_GetURIPath/*'/>
		/// <seealso cref='PDFium.FPDFAction_GetURIPath(FPDF_DOCUMENT, FPDF_ACTION)'/>
		private static uint FPDFAction_GetURIPath(FPDF_DOCUMENT document, FPDF_ACTION action, ref byte buffer, uint buflen)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAction_GetURIPath_x64(document, action, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAction_GetURIPath_x86(document, action, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFDest_GetPageIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFDest_GetPageIndex")]
			internal static extern int FPDFDest_GetPageIndex_x86(FPDF_DOCUMENT document, FPDF_DEST dest);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFDest_GetPageIndex")]
			internal static extern int FPDFDest_GetPageIndex_x64(FPDF_DOCUMENT document, FPDF_DEST dest);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFDest_GetPageIndex/*'/>
		/// <seealso cref='PdfDestination.PageIndex'/>
		/// <seealso cref='PdfDocument.Destinations'/>
		public static int FPDFDest_GetPageIndex(FPDF_DOCUMENT document, FPDF_DEST dest)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFDest_GetPageIndex_x64(document, dest); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFDest_GetPageIndex_x86(document, dest); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFDest_GetLocationInPage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFDest_GetLocationInPage")]
			internal static extern bool FPDFDest_GetLocationInPage_x86(FPDF_DEST dest, out bool hasXCoord, out bool hasYCoord, out bool hasZoom, out float x, out float y, out float zoom);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFDest_GetLocationInPage")]
			internal static extern bool FPDFDest_GetLocationInPage_x64(FPDF_DEST dest, out bool hasXCoord, out bool hasYCoord, out bool hasZoom, out float x, out float y, out float zoom);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFDest_GetLocationInPage/*'/>
		/// <seealso cref='PdfDestination.LocationInPage'/>
		/// <seealso cref='PdfDocument.Destinations'/>
		public static bool FPDFDest_GetLocationInPage(FPDF_DEST dest, out bool hasXCoord, out bool hasYCoord, out bool hasZoom, out float x, out float y, out float zoom)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFDest_GetLocationInPage_x64(dest, out hasXCoord, out hasYCoord, out hasZoom, out x, out y, out zoom); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFDest_GetLocationInPage_x86(dest, out hasXCoord, out hasYCoord, out hasZoom, out x, out y, out zoom); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFLink_GetLinkAtPoint

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetLinkAtPoint")]
			internal static extern FPDF_LINK FPDFLink_GetLinkAtPoint_x86(FPDF_PAGE page, double x, double y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetLinkAtPoint")]
			internal static extern FPDF_LINK FPDFLink_GetLinkAtPoint_x64(FPDF_PAGE page, double x, double y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetLinkAtPoint/*'/>
		public static FPDF_LINK FPDFLink_GetLinkAtPoint(FPDF_PAGE page, double x, double y)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetLinkAtPoint_x64(page, x, y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetLinkAtPoint_x86(page, x, y); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFLink_GetLinkZOrderAtPoint

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetLinkZOrderAtPoint")]
			internal static extern int FPDFLink_GetLinkZOrderAtPoint_x86(FPDF_PAGE page, double x, double y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetLinkZOrderAtPoint")]
			internal static extern int FPDFLink_GetLinkZOrderAtPoint_x64(FPDF_PAGE page, double x, double y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetLinkZOrderAtPoint/*'/>
		public static int FPDFLink_GetLinkZOrderAtPoint(FPDF_PAGE page, double x, double y)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetLinkZOrderAtPoint_x64(page, x, y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetLinkZOrderAtPoint_x86(page, x, y); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFLink_GetDest

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetDest")]
			internal static extern FPDF_DEST FPDFLink_GetDest_x86(FPDF_DOCUMENT document, FPDF_LINK link);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetDest")]
			internal static extern FPDF_DEST FPDFLink_GetDest_x64(FPDF_DOCUMENT document, FPDF_LINK link);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetDest/*'/>
		public static FPDF_DEST FPDFLink_GetDest(FPDF_DOCUMENT document, FPDF_LINK link)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetDest_x64(document, link); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetDest_x86(document, link); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFLink_GetAction

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetAction")]
			internal static extern FPDF_ACTION FPDFLink_GetAction_x86(FPDF_LINK link);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetAction")]
			internal static extern FPDF_ACTION FPDFLink_GetAction_x64(FPDF_LINK link);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetAction/*'/>
		public static FPDF_ACTION FPDFLink_GetAction(FPDF_LINK link)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetAction_x64(link); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetAction_x86(link); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFLink_Enumerate

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_Enumerate")]
			internal static extern bool FPDFLink_Enumerate_x86(FPDF_PAGE page, ref int startPos, out FPDF_LINK linkAnnot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_Enumerate")]
			internal static extern bool FPDFLink_Enumerate_x64(FPDF_PAGE page, ref int startPos, out FPDF_LINK linkAnnot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_Enumerate/*'/>
		private static bool FPDFLink_Enumerate(FPDF_PAGE page, ref int startPos, out FPDF_LINK linkAnnot)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_Enumerate_x64(page, ref startPos, out linkAnnot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_Enumerate_x86(page, ref startPos, out linkAnnot); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFLink_GetAnnotRect

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetAnnotRect")]
			internal static extern bool FPDFLink_GetAnnotRect_x86(FPDF_LINK linkAnnot, out FS_RECTF rect);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetAnnotRect")]
			internal static extern bool FPDFLink_GetAnnotRect_x64(FPDF_LINK linkAnnot, out FS_RECTF rect);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetAnnotRect/*'/>
		public static bool FPDFLink_GetAnnotRect(FPDF_LINK linkAnnot, out FS_RECTF rect)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetAnnotRect_x64(linkAnnot, out rect); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetAnnotRect_x86(linkAnnot, out rect); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFLink_CountQuadPoints

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_CountQuadPoints")]
			internal static extern int FPDFLink_CountQuadPoints_x86(FPDF_LINK linkAnnot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_CountQuadPoints")]
			internal static extern int FPDFLink_CountQuadPoints_x64(FPDF_LINK linkAnnot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_CountQuadPoints/*'/>
		public static int FPDFLink_CountQuadPoints(FPDF_LINK linkAnnot)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_CountQuadPoints_x64(linkAnnot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_CountQuadPoints_x86(linkAnnot); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFLink_GetQuadPoints

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetQuadPoints")]
			internal static extern bool FPDFLink_GetQuadPoints_x86(FPDF_LINK linkAnnot, int quadIndex, out FS_QUADPOINTSF quadPoints);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetQuadPoints")]
			internal static extern bool FPDFLink_GetQuadPoints_x64(FPDF_LINK linkAnnot, int quadIndex, out FS_QUADPOINTSF quadPoints);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetQuadPoints/*'/>
		public static bool FPDFLink_GetQuadPoints(FPDF_LINK linkAnnot, int quadIndex, out FS_QUADPOINTSF quadPoints)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetQuadPoints_x64(linkAnnot, quadIndex, out quadPoints); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetQuadPoints_x86(linkAnnot, quadIndex, out quadPoints); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetMetaText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetMetaText")]
			internal static extern uint FPDF_GetMetaText_x86(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string tag, ref byte buffer, uint buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetMetaText")]
			internal static extern uint FPDF_GetMetaText_x64(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string tag, ref byte buffer, uint buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetMetaText/*'/>
		/// <seealso cref='PDFium.FPDF_GetMetaText(FPDF_DOCUMENT, string)'/>
		/// <seealso cref='PDFium.FPDF_GetMetaText(FPDF_DOCUMENT, MetadataTags)'/>
		public static uint FPDF_GetMetaText(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string tag, ref byte buffer, uint buflen)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetMetaText_x64(document, tag, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetMetaText_x86(document, tag, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetPageLabel

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageLabel")]
			internal static extern uint FPDF_GetPageLabel_x86(FPDF_DOCUMENT document, int page_index, ref byte buffer, uint buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageLabel")]
			internal static extern uint FPDF_GetPageLabel_x64(FPDF_DOCUMENT document, int page_index, ref byte buffer, uint buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageLabel/*'/>
		/// <seealso cref='PDFium.FPDF_GetPageLabel(FPDF_DOCUMENT, int)'/>
		private static uint FPDF_GetPageLabel(FPDF_DOCUMENT document, int page_index, ref byte buffer, uint buflen)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageLabel_x64(document, page_index, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageLabel_x86(document, page_index, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_CreateNewDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_CreateNewDocument")]
			internal static extern FPDF_DOCUMENT FPDF_CreateNewDocument_x86();

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_CreateNewDocument")]
			internal static extern FPDF_DOCUMENT FPDF_CreateNewDocument_x64();
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_CreateNewDocument/*'/>
		/// <seealso cref='PdfDocument.PdfDocument'/>
		public static FPDF_DOCUMENT FPDF_CreateNewDocument()
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_CreateNewDocument_x64(); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_CreateNewDocument_x86(); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_New

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_New")]
			internal static extern FPDF_PAGE FPDFPage_New_x86(FPDF_DOCUMENT document, int page_index, double width, double height);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_New")]
			internal static extern FPDF_PAGE FPDFPage_New_x64(FPDF_DOCUMENT document, int page_index, double width, double height);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_New/*'/>
		/// <seealso cref='PdfPageCollection.Add(double, double)'/>
		/// <seealso cref='PdfPageCollection.Insert(int, double, double)'/>
		/// <seealso cref='PdfDocument.Pages'/>
		public static FPDF_PAGE FPDFPage_New(FPDF_DOCUMENT document, int page_index, double width, double height)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_New_x64(document, page_index, width, height); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_New_x86(document, page_index, width, height); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_Delete

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_Delete")]
			internal static extern void FPDFPage_Delete_x86(FPDF_DOCUMENT document, int page_index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_Delete")]
			internal static extern void FPDFPage_Delete_x64(FPDF_DOCUMENT document, int page_index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_Delete/*'/>
		/// <seealso cref='PdfPageCollection.RemoveAt(int)'/>
		/// <seealso cref='PdfDocument.Pages'/>
		public static void FPDFPage_Delete(FPDF_DOCUMENT document, int page_index)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_Delete_x64(document, page_index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_Delete_x86(document, page_index); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_GetRotation

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_GetRotation")]
			internal static extern PageOrientations FPDFPage_GetRotation_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_GetRotation")]
			internal static extern PageOrientations FPDFPage_GetRotation_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetRotation/*'/>
		/// <seealso cref='PdfPage.Orientation'/>
		public static PageOrientations FPDFPage_GetRotation(FPDF_PAGE page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetRotation_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetRotation_x86(page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_SetRotation

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_SetRotation")]
			internal static extern void FPDFPage_SetRotation_x86(FPDF_PAGE page, PageOrientations rotation);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_SetRotation")]
			internal static extern void FPDFPage_SetRotation_x64(FPDF_PAGE page, PageOrientations rotation);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_SetRotation/*'/>
		/// <seealso cref='PdfPage.Orientation'/>
		public static void FPDFPage_SetRotation(FPDF_PAGE page, PageOrientations rotation)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_SetRotation_x64(page, rotation); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_SetRotation_x86(page, rotation); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_InsertObject

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_InsertObject")]
			internal static extern void FPDFPage_InsertObject_x86(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_InsertObject")]
			internal static extern void FPDFPage_InsertObject_x64(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_InsertObject/*'/>
		private static void FPDFPage_InsertObject(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_InsertObject_x64(page, page_obj); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_InsertObject_x86(page, page_obj); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_CountObject

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_CountObject")]
			internal static extern int FPDFPage_CountObject_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_CountObject")]
			internal static extern int FPDFPage_CountObject_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_CountObject/*'/>
		public static int FPDFPage_CountObject(FPDF_PAGE page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_CountObject_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_CountObject_x86(page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_GetObject

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_GetObject")]
			internal static extern FPDF_PAGEOBJECT FPDFPage_GetObject_x86(FPDF_PAGE page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_GetObject")]
			internal static extern FPDF_PAGEOBJECT FPDFPage_GetObject_x64(FPDF_PAGE page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetObject/*'/>
		public static FPDF_PAGEOBJECT FPDFPage_GetObject(FPDF_PAGE page, int index)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetObject_x64(page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetObject_x86(page, index); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_HasTransparency

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_HasTransparency")]
			internal static extern bool FPDFPage_HasTransparency_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_HasTransparency")]
			internal static extern bool FPDFPage_HasTransparency_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_HasTransparency/*'/>
		public static bool FPDFPage_HasTransparency(FPDF_PAGE page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_HasTransparency_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_HasTransparency_x86(page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_GenerateContent

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_GenerateContent")]
			internal static extern bool FPDFPage_GenerateContent_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_GenerateContent")]
			internal static extern bool FPDFPage_GenerateContent_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GenerateContent/*'/>
		public static bool FPDFPage_GenerateContent(FPDF_PAGE page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GenerateContent_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GenerateContent_x86(page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPageObj_HasTransparency

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPageObj_HasTransparency")]
			internal static extern bool FPDFPageObj_HasTransparency_x86(FPDF_PAGEOBJECT pageObject);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPageObj_HasTransparency")]
			internal static extern bool FPDFPageObj_HasTransparency_x64(FPDF_PAGEOBJECT pageObject);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_HasTransparency/*'/>
		public static bool FPDFPageObj_HasTransparency(FPDF_PAGEOBJECT pageObject)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_HasTransparency_x64(pageObject); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_HasTransparency_x86(pageObject); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPageObj_Transform

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPageObj_Transform")]
			internal static extern void FPDFPageObj_Transform_x86(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPageObj_Transform")]
			internal static extern void FPDFPageObj_Transform_x64(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_Transform/*'/>
		public static void FPDFPageObj_Transform(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPageObj_Transform_x64(page_object, a, b, c, d, e, f); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPageObj_Transform_x86(page_object, a, b, c, d, e, f); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_TransformAnnots

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_TransformAnnots")]
			internal static extern void FPDFPage_TransformAnnots_x86(FPDF_PAGE page, double a, double b, double c, double d, double e, double f);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_TransformAnnots")]
			internal static extern void FPDFPage_TransformAnnots_x64(FPDF_PAGE page, double a, double b, double c, double d, double e, double f);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_TransformAnnots/*'/>
		public static void FPDFPage_TransformAnnots(FPDF_PAGE page, double a, double b, double c, double d, double e, double f)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_TransformAnnots_x64(page, a, b, c, d, e, f); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_TransformAnnots_x86(page, a, b, c, d, e, f); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPageObj_NewImageObj

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPageObj_NewImageObj")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_NewImageObj_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPageObj_NewImageObj")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_NewImageObj_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_NewImageObj/*'/>
		public static FPDF_PAGEOBJECT FPDFPageObj_NewImageObj(FPDF_DOCUMENT document)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_NewImageObj_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_NewImageObj_x86(document); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFImageObj_LoadJpegFile

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFImageObj_LoadJpegFile")]
			internal static extern bool FPDFImageObj_LoadJpegFile_x86(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFImageObj_LoadJpegFile")]
			internal static extern bool FPDFImageObj_LoadJpegFile_x64(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_LoadJpegFile/*'/>
		private static bool FPDFImageObj_LoadJpegFile(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_LoadJpegFile_x64(ref pages, nCount, image_object, fileRead); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_LoadJpegFile_x86(ref pages, nCount, image_object, fileRead); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFImageObj_LoadJpegFileInline

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFImageObj_LoadJpegFileInline")]
			internal static extern bool FPDFImageObj_LoadJpegFileInline_x86(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFImageObj_LoadJpegFileInline")]
			internal static extern bool FPDFImageObj_LoadJpegFileInline_x64(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_LoadJpegFileInline/*'/>
		private static bool FPDFImageObj_LoadJpegFileInline(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_LoadJpegFileInline_x64(ref pages, nCount, image_object, fileRead); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_LoadJpegFileInline_x86(ref pages, nCount, image_object, fileRead); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFImageObj_SetMatrix

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFImageObj_SetMatrix")]
			internal static extern bool FPDFImageObj_SetMatrix_x86(FPDF_PAGEOBJECT image_object, double a, double b, double c, double d, double e, double f);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFImageObj_SetMatrix")]
			internal static extern bool FPDFImageObj_SetMatrix_x64(FPDF_PAGEOBJECT image_object, double a, double b, double c, double d, double e, double f);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_SetMatrix/*'/>
		public static bool FPDFImageObj_SetMatrix(FPDF_PAGEOBJECT image_object, double a, double b, double c, double d, double e, double f)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_SetMatrix_x64(image_object, a, b, c, d, e, f); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_SetMatrix_x86(image_object, a, b, c, d, e, f); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFImageObj_SetBitmap

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFImageObj_SetBitmap")]
			internal static extern bool FPDFImageObj_SetBitmap_x86(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFImageObj_SetBitmap")]
			internal static extern bool FPDFImageObj_SetBitmap_x64(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_SetBitmap/*'/>
		public static bool FPDFImageObj_SetBitmap(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_BITMAP bitmap)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_SetBitmap_x64(ref pages, nCount, image_object, bitmap); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_SetBitmap_x86(ref pages, nCount, image_object, bitmap); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPageObj_CreateNewPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPageObj_CreateNewPath")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateNewPath_x86(float x, float y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPageObj_CreateNewPath")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateNewPath_x64(float x, float y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_CreateNewPath/*'/>
		public static FPDF_PAGEOBJECT FPDFPageObj_CreateNewPath(float x, float y)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_CreateNewPath_x64(x, y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_CreateNewPath_x86(x, y); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPageObj_CreateNewRect

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPageObj_CreateNewRect")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateNewRect_x86(float x, float y, float w, float h);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPageObj_CreateNewRect")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateNewRect_x64(float x, float y, float w, float h);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_CreateNewRect/*'/>
		public static FPDF_PAGEOBJECT FPDFPageObj_CreateNewRect(float x, float y, float w, float h)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_CreateNewRect_x64(x, y, w, h); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_CreateNewRect_x86(x, y, w, h); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPath_SetStrokeColor

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_SetStrokeColor")]
			internal static extern bool FPDFPath_SetStrokeColor_x86(FPDF_PAGEOBJECT path, uint R, uint G, uint B, uint A);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_SetStrokeColor")]
			internal static extern bool FPDFPath_SetStrokeColor_x64(FPDF_PAGEOBJECT path, uint R, uint G, uint B, uint A);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_SetStrokeColor/*'/>
		public static bool FPDFPath_SetStrokeColor(FPDF_PAGEOBJECT path, uint R, uint G, uint B, uint A)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_SetStrokeColor_x64(path, R, G, B, A); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_SetStrokeColor_x86(path, R, G, B, A); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPath_SetStrokeWidth

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_SetStrokeWidth")]
			internal static extern bool FPDFPath_SetStrokeWidth_x86(FPDF_PAGEOBJECT path, float width);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_SetStrokeWidth")]
			internal static extern bool FPDFPath_SetStrokeWidth_x64(FPDF_PAGEOBJECT path, float width);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_SetStrokeWidth/*'/>
		public static bool FPDFPath_SetStrokeWidth(FPDF_PAGEOBJECT path, float width)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_SetStrokeWidth_x64(path, width); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_SetStrokeWidth_x86(path, width); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPath_SetFillColor

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_SetFillColor")]
			internal static extern bool FPDFPath_SetFillColor_x86(FPDF_PAGEOBJECT path, uint R, uint G, uint B, uint A);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_SetFillColor")]
			internal static extern bool FPDFPath_SetFillColor_x64(FPDF_PAGEOBJECT path, uint R, uint G, uint B, uint A);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_SetFillColor/*'/>
		public static bool FPDFPath_SetFillColor(FPDF_PAGEOBJECT path, uint R, uint G, uint B, uint A)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_SetFillColor_x64(path, R, G, B, A); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_SetFillColor_x86(path, R, G, B, A); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPath_MoveTo

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_MoveTo")]
			internal static extern bool FPDFPath_MoveTo_x86(FPDF_PAGEOBJECT path, float x, float y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_MoveTo")]
			internal static extern bool FPDFPath_MoveTo_x64(FPDF_PAGEOBJECT path, float x, float y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_MoveTo/*'/>
		public static bool FPDFPath_MoveTo(FPDF_PAGEOBJECT path, float x, float y)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_MoveTo_x64(path, x, y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_MoveTo_x86(path, x, y); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPath_LineTo

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_LineTo")]
			internal static extern bool FPDFPath_LineTo_x86(FPDF_PAGEOBJECT path, float x, float y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_LineTo")]
			internal static extern bool FPDFPath_LineTo_x64(FPDF_PAGEOBJECT path, float x, float y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_LineTo/*'/>
		public static bool FPDFPath_LineTo(FPDF_PAGEOBJECT path, float x, float y)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_LineTo_x64(path, x, y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_LineTo_x86(path, x, y); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPath_BezierTo

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_BezierTo")]
			internal static extern bool FPDFPath_BezierTo_x86(FPDF_PAGEOBJECT path, float x1, float y1, float x2, float y2, float x3, float y3);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_BezierTo")]
			internal static extern bool FPDFPath_BezierTo_x64(FPDF_PAGEOBJECT path, float x1, float y1, float x2, float y2, float x3, float y3);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_BezierTo/*'/>
		public static bool FPDFPath_BezierTo(FPDF_PAGEOBJECT path, float x1, float y1, float x2, float y2, float x3, float y3)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_BezierTo_x64(path, x1, y1, x2, y2, x3, y3); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_BezierTo_x86(path, x1, y1, x2, y2, x3, y3); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPath_Close

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_Close")]
			internal static extern bool FPDFPath_Close_x86(FPDF_PAGEOBJECT path);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_Close")]
			internal static extern bool FPDFPath_Close_x64(FPDF_PAGEOBJECT path);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_Close/*'/>
		public static bool FPDFPath_Close(FPDF_PAGEOBJECT path)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_Close_x64(path); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_Close_x86(path); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPath_SetDrawMode

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_SetDrawMode")]
			internal static extern bool FPDFPath_SetDrawMode_x86(FPDF_PAGEOBJECT path, PathFillModes fillmode, bool stroke);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPath_SetDrawMode")]
			internal static extern bool FPDFPath_SetDrawMode_x64(FPDF_PAGEOBJECT path, PathFillModes fillmode, bool stroke);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_SetDrawMode/*'/>
		public static bool FPDFPath_SetDrawMode(FPDF_PAGEOBJECT path, PathFillModes fillmode, bool stroke)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_SetDrawMode_x64(path, fillmode, stroke); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_SetDrawMode_x86(path, fillmode, stroke); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPageObj_NewTextObj

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPageObj_NewTextObj")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_NewTextObj_x86(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font, float font_size);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPageObj_NewTextObj")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_NewTextObj_x64(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font, float font_size);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_NewTextObj/*'/>
		public static FPDF_PAGEOBJECT FPDFPageObj_NewTextObj(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font, float font_size)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_NewTextObj_x64(document, font, font_size); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_NewTextObj_x86(document, font, font_size); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_SetText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_SetText")]
			internal static extern bool FPDFText_SetText_x86(FPDF_PAGEOBJECT text_object, [MarshalAs(UnmanagedType.LPStr)] string text);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_SetText")]
			internal static extern bool FPDFText_SetText_x64(FPDF_PAGEOBJECT text_object, [MarshalAs(UnmanagedType.LPStr)] string text);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_SetText/*'/>
		public static bool FPDFText_SetText(FPDF_PAGEOBJECT text_object, [MarshalAs(UnmanagedType.LPStr)] string text)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_SetText_x64(text_object, text); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_SetText_x86(text_object, text); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_LoadFont

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_LoadFont")]
			internal static extern FPDF_FONT FPDFText_LoadFont_x86(FPDF_DOCUMENT document, ref byte data, uint size, FontTypes font_type, bool cid);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_LoadFont")]
			internal static extern FPDF_FONT FPDFText_LoadFont_x64(FPDF_DOCUMENT document, ref byte data, uint size, FontTypes font_type, bool cid);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_LoadFont/*'/>
		private static FPDF_FONT FPDFText_LoadFont(FPDF_DOCUMENT document, ref byte data, uint size, FontTypes font_type, bool cid)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_LoadFont_x64(document, ref data, size, font_type, cid); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_LoadFont_x86(document, ref data, size, font_type, cid); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFDoc_GetPageMode

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFDoc_GetPageMode")]
			internal static extern PageModes FPDFDoc_GetPageMode_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFDoc_GetPageMode")]
			internal static extern PageModes FPDFDoc_GetPageMode_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFDoc_GetPageMode/*'/>
		/// <seealso cref='PdfDocument.PageMode'/>
		public static PageModes FPDFDoc_GetPageMode(FPDF_DOCUMENT document)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFDoc_GetPageMode_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFDoc_GetPageMode_x86(document); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_Flatten

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_Flatten")]
			internal static extern FlattenResults FPDFPage_Flatten_x86(FPDF_PAGE page, FlattenFlags nFlag);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_Flatten")]
			internal static extern FlattenResults FPDFPage_Flatten_x64(FPDF_PAGE page, FlattenFlags nFlag);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_Flatten/*'/>
		/// <seealso cref='PdfPage.Flatten(FlattenFlags)'/>
		public static FlattenResults FPDFPage_Flatten(FPDF_PAGE page, FlattenFlags nFlag)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_Flatten_x64(page, nFlag); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_Flatten_x86(page, nFlag); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_ImportPages

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_ImportPages")]
			internal static extern bool FPDF_ImportPages_x86(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, [MarshalAs(UnmanagedType.LPStr)] string pagerange, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_ImportPages")]
			internal static extern bool FPDF_ImportPages_x64(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, [MarshalAs(UnmanagedType.LPStr)] string pagerange, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_ImportPages/*'/>
		/// <seealso cref='PdfPageCollection.Insert(int, PdfDocument, int[])'/>
		/// <seealso cref='PdfPageCollection.Add(PdfDocument, int[])'/>
		/// <seealso cref='PdfDocument.Pages'/>
		public static bool FPDF_ImportPages(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, [MarshalAs(UnmanagedType.LPStr)] string pagerange, int index)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_ImportPages_x64(dest_doc, src_doc, pagerange, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_ImportPages_x86(dest_doc, src_doc, pagerange, index); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_CopyViewerPreferences

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_CopyViewerPreferences")]
			internal static extern bool FPDF_CopyViewerPreferences_x86(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_CopyViewerPreferences")]
			internal static extern bool FPDF_CopyViewerPreferences_x64(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_CopyViewerPreferences/*'/>
		/// <seealso cref='PdfDocument.CopyViewerPreferencesFrom(PdfDocument)'/>
		public static bool FPDF_CopyViewerPreferences(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_CopyViewerPreferences_x64(dest_doc, src_doc); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_CopyViewerPreferences_x86(dest_doc, src_doc); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_RenderPageBitmap_Start

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_RenderPageBitmap_Start")]
			internal static extern RenderingStatus FPDF_RenderPageBitmap_Start_x86(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags, IFSDK_PAUSE pause);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_RenderPageBitmap_Start")]
			internal static extern RenderingStatus FPDF_RenderPageBitmap_Start_x64(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags, IFSDK_PAUSE pause);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RenderPageBitmap_Start/*'/>
		public static RenderingStatus FPDF_RenderPageBitmap_Start(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags, IFSDK_PAUSE pause)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_RenderPageBitmap_Start_x64(bitmap, page, start_x, start_y, size_x, size_y, rotate, flags, pause); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_RenderPageBitmap_Start_x86(bitmap, page, start_x, start_y, size_x, size_y, rotate, flags, pause); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_RenderPage_Continue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_RenderPage_Continue")]
			internal static extern RenderingStatus FPDF_RenderPage_Continue_x86(FPDF_PAGE page, IFSDK_PAUSE pause);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_RenderPage_Continue")]
			internal static extern RenderingStatus FPDF_RenderPage_Continue_x64(FPDF_PAGE page, IFSDK_PAUSE pause);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RenderPage_Continue/*'/>
		public static RenderingStatus FPDF_RenderPage_Continue(FPDF_PAGE page, IFSDK_PAUSE pause)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_RenderPage_Continue_x64(page, pause); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_RenderPage_Continue_x86(page, pause); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_RenderPage_Close

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_RenderPage_Close")]
			internal static extern void FPDF_RenderPage_Close_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_RenderPage_Close")]
			internal static extern void FPDF_RenderPage_Close_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RenderPage_Close/*'/>
		public static void FPDF_RenderPage_Close(FPDF_PAGE page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_RenderPage_Close_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_RenderPage_Close_x86(page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_SaveAsCopy

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_SaveAsCopy")]
			internal static extern bool FPDF_SaveAsCopy_x86(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_SaveAsCopy")]
			internal static extern bool FPDF_SaveAsCopy_x64(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_SaveAsCopy/*'/>
		/// <seealso cref='PDFium.FPDF_SaveAsCopy(FPDF_DOCUMENT, Stream, SaveFlags, int)'/>
		/// <seealso cref='PdfDocument.Save(Stream, SaveFlags, int)'/>
		public static bool FPDF_SaveAsCopy(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_SaveAsCopy_x64(document, fileWrite, flags); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_SaveAsCopy_x86(document, fileWrite, flags); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_SaveWithVersion

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_SaveWithVersion")]
			internal static extern bool FPDF_SaveWithVersion_x86(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags, int fileVersion);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_SaveWithVersion")]
			internal static extern bool FPDF_SaveWithVersion_x64(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags, int fileVersion);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_SaveWithVersion/*'/>
		/// <seealso cref='PDFium.FPDF_SaveAsCopy(FPDF_DOCUMENT, Stream, SaveFlags, int)'/>
		/// <seealso cref='PdfDocument.Save(Stream, SaveFlags, int)'/>
		public static bool FPDF_SaveWithVersion(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags, int fileVersion)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_SaveWithVersion_x64(document, fileWrite, flags, fileVersion); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_SaveWithVersion_x86(document, fileWrite, flags, fileVersion); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_GetCharIndexFromTextIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetCharIndexFromTextIndex")]
			internal static extern int FPDFText_GetCharIndexFromTextIndex_x86(FPDF_TEXTPAGE text_page, int nTextIndex);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetCharIndexFromTextIndex")]
			internal static extern int FPDFText_GetCharIndexFromTextIndex_x64(FPDF_TEXTPAGE text_page, int nTextIndex);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetCharIndexFromTextIndex/*'/>
		public static int FPDFText_GetCharIndexFromTextIndex(FPDF_TEXTPAGE text_page, int nTextIndex)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetCharIndexFromTextIndex_x64(text_page, nTextIndex); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetCharIndexFromTextIndex_x86(text_page, nTextIndex); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_GetTextIndexFromCharIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetTextIndexFromCharIndex")]
			internal static extern int FPDFText_GetTextIndexFromCharIndex_x86(FPDF_TEXTPAGE text_page, int nCharIndex);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetTextIndexFromCharIndex")]
			internal static extern int FPDFText_GetTextIndexFromCharIndex_x64(FPDF_TEXTPAGE text_page, int nCharIndex);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetTextIndexFromCharIndex/*'/>
		public static int FPDFText_GetTextIndexFromCharIndex(FPDF_TEXTPAGE text_page, int nCharIndex)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetTextIndexFromCharIndex_x64(text_page, nCharIndex); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetTextIndexFromCharIndex_x86(text_page, nCharIndex); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_StructTree_GetForPage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_StructTree_GetForPage")]
			internal static extern FPDF_STRUCTTREE FPDF_StructTree_GetForPage_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_StructTree_GetForPage")]
			internal static extern FPDF_STRUCTTREE FPDF_StructTree_GetForPage_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructTree_GetForPage/*'/>
		public static FPDF_STRUCTTREE FPDF_StructTree_GetForPage(FPDF_PAGE page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructTree_GetForPage_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructTree_GetForPage_x86(page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_StructTree_Close

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_StructTree_Close")]
			internal static extern void FPDF_StructTree_Close_x86(FPDF_STRUCTTREE struct_tree);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_StructTree_Close")]
			internal static extern void FPDF_StructTree_Close_x64(FPDF_STRUCTTREE struct_tree);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructTree_Close/*'/>
		public static void FPDF_StructTree_Close(FPDF_STRUCTTREE struct_tree)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_StructTree_Close_x64(struct_tree); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_StructTree_Close_x86(struct_tree); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_StructTree_CountChildren

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_StructTree_CountChildren")]
			internal static extern int FPDF_StructTree_CountChildren_x86(FPDF_STRUCTTREE struct_tree);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_StructTree_CountChildren")]
			internal static extern int FPDF_StructTree_CountChildren_x64(FPDF_STRUCTTREE struct_tree);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructTree_CountChildren/*'/>
		public static int FPDF_StructTree_CountChildren(FPDF_STRUCTTREE struct_tree)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructTree_CountChildren_x64(struct_tree); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructTree_CountChildren_x86(struct_tree); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_StructTree_GetChildAtIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_StructTree_GetChildAtIndex")]
			internal static extern FPDF_STRUCTELEMENT FPDF_StructTree_GetChildAtIndex_x86(FPDF_STRUCTTREE struct_tree, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_StructTree_GetChildAtIndex")]
			internal static extern FPDF_STRUCTELEMENT FPDF_StructTree_GetChildAtIndex_x64(FPDF_STRUCTTREE struct_tree, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructTree_GetChildAtIndex/*'/>
		public static FPDF_STRUCTELEMENT FPDF_StructTree_GetChildAtIndex(FPDF_STRUCTTREE struct_tree, int index)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructTree_GetChildAtIndex_x64(struct_tree, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructTree_GetChildAtIndex_x86(struct_tree, index); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_StructElement_GetAltText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_StructElement_GetAltText")]
			internal static extern uint FPDF_StructElement_GetAltText_x86(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_StructElement_GetAltText")]
			internal static extern uint FPDF_StructElement_GetAltText_x64(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetAltText/*'/>
		private static uint FPDF_StructElement_GetAltText(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetAltText_x64(struct_element, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetAltText_x86(struct_element, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_StructElement_CountChildren

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_StructElement_CountChildren")]
			internal static extern int FPDF_StructElement_CountChildren_x86(FPDF_STRUCTELEMENT struct_element);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_StructElement_CountChildren")]
			internal static extern int FPDF_StructElement_CountChildren_x64(FPDF_STRUCTELEMENT struct_element);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_CountChildren/*'/>
		public static int FPDF_StructElement_CountChildren(FPDF_STRUCTELEMENT struct_element)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_CountChildren_x64(struct_element); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_CountChildren_x86(struct_element); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_StructElement_GetChildAtIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_StructElement_GetChildAtIndex")]
			internal static extern FPDF_STRUCTELEMENT FPDF_StructElement_GetChildAtIndex_x86(FPDF_STRUCTELEMENT struct_element, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_StructElement_GetChildAtIndex")]
			internal static extern FPDF_STRUCTELEMENT FPDF_StructElement_GetChildAtIndex_x64(FPDF_STRUCTELEMENT struct_element, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetChildAtIndex/*'/>
		public static FPDF_STRUCTELEMENT FPDF_StructElement_GetChildAtIndex(FPDF_STRUCTELEMENT struct_element, int index)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetChildAtIndex_x64(struct_element, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetChildAtIndex_x86(struct_element, index); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_LoadPage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_LoadPage")]
			internal static extern FPDF_TEXTPAGE FPDFText_LoadPage_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_LoadPage")]
			internal static extern FPDF_TEXTPAGE FPDFText_LoadPage_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_LoadPage/*'/>
		public static FPDF_TEXTPAGE FPDFText_LoadPage(FPDF_PAGE page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_LoadPage_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_LoadPage_x86(page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_ClosePage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_ClosePage")]
			internal static extern void FPDFText_ClosePage_x86(FPDF_TEXTPAGE text_page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_ClosePage")]
			internal static extern void FPDFText_ClosePage_x64(FPDF_TEXTPAGE text_page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_ClosePage/*'/>
		public static void FPDFText_ClosePage(FPDF_TEXTPAGE text_page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFText_ClosePage_x64(text_page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFText_ClosePage_x86(text_page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_CountChars

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_CountChars")]
			internal static extern int FPDFText_CountChars_x86(FPDF_TEXTPAGE text_page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_CountChars")]
			internal static extern int FPDFText_CountChars_x64(FPDF_TEXTPAGE text_page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_CountChars/*'/>
		public static int FPDFText_CountChars(FPDF_TEXTPAGE text_page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_CountChars_x64(text_page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_CountChars_x86(text_page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_GetUnicode

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetUnicode")]
			[return: MarshalAs(UnmanagedType.U4)]
			internal static extern char FPDFText_GetUnicode_x86(FPDF_TEXTPAGE text_page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetUnicode")]
			[return: MarshalAs(UnmanagedType.U4)]
			internal static extern char FPDFText_GetUnicode_x64(FPDF_TEXTPAGE text_page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetUnicode/*'/>
		public static char FPDFText_GetUnicode(FPDF_TEXTPAGE text_page, int index)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetUnicode_x64(text_page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetUnicode_x86(text_page, index); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_GetFontSize

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetFontSize")]
			internal static extern double FPDFText_GetFontSize_x86(FPDF_TEXTPAGE text_page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetFontSize")]
			internal static extern double FPDFText_GetFontSize_x64(FPDF_TEXTPAGE text_page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetFontSize/*'/>
		public static double FPDFText_GetFontSize(FPDF_TEXTPAGE text_page, int index)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetFontSize_x64(text_page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetFontSize_x86(text_page, index); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_GetCharBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetCharBox")]
			internal static extern void FPDFText_GetCharBox_x86(FPDF_TEXTPAGE text_page, int index, out double left, out double right, out double bottom, out double top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetCharBox")]
			internal static extern void FPDFText_GetCharBox_x64(FPDF_TEXTPAGE text_page, int index, out double left, out double right, out double bottom, out double top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetCharBox/*'/>
		public static void FPDFText_GetCharBox(FPDF_TEXTPAGE text_page, int index, out double left, out double right, out double bottom, out double top)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFText_GetCharBox_x64(text_page, index, out left, out right, out bottom, out top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFText_GetCharBox_x86(text_page, index, out left, out right, out bottom, out top); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_GetCharIndexAtPos

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetCharIndexAtPos")]
			internal static extern int FPDFText_GetCharIndexAtPos_x86(FPDF_TEXTPAGE text_page, double x, double y, double xTolerance, double yTolerance);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetCharIndexAtPos")]
			internal static extern int FPDFText_GetCharIndexAtPos_x64(FPDF_TEXTPAGE text_page, double x, double y, double xTolerance, double yTolerance);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetCharIndexAtPos/*'/>
		public static int FPDFText_GetCharIndexAtPos(FPDF_TEXTPAGE text_page, double x, double y, double xTolerance, double yTolerance)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetCharIndexAtPos_x64(text_page, x, y, xTolerance, yTolerance); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetCharIndexAtPos_x86(text_page, x, y, xTolerance, yTolerance); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_GetText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetText")]
			internal static extern int FPDFText_GetText_x86(FPDF_TEXTPAGE text_page, int start_index, int count, ref byte result);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetText")]
			internal static extern int FPDFText_GetText_x64(FPDF_TEXTPAGE text_page, int start_index, int count, ref byte result);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetText/*'/>
		private static int FPDFText_GetText(FPDF_TEXTPAGE text_page, int start_index, int count, ref byte result)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetText_x64(text_page, start_index, count, ref result); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetText_x86(text_page, start_index, count, ref result); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_CountRects

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_CountRects")]
			internal static extern int FPDFText_CountRects_x86(FPDF_TEXTPAGE text_page, int start_index, int count);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_CountRects")]
			internal static extern int FPDFText_CountRects_x64(FPDF_TEXTPAGE text_page, int start_index, int count);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_CountRects/*'/>
		public static int FPDFText_CountRects(FPDF_TEXTPAGE text_page, int start_index, int count)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_CountRects_x64(text_page, start_index, count); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_CountRects_x86(text_page, start_index, count); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_GetRect

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetRect")]
			internal static extern void FPDFText_GetRect_x86(FPDF_TEXTPAGE text_page, int rect_index, out double left, out double top, out double right, out double bottom);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetRect")]
			internal static extern void FPDFText_GetRect_x64(FPDF_TEXTPAGE text_page, int rect_index, out double left, out double top, out double right, out double bottom);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetRect/*'/>
		public static void FPDFText_GetRect(FPDF_TEXTPAGE text_page, int rect_index, out double left, out double top, out double right, out double bottom)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFText_GetRect_x64(text_page, rect_index, out left, out top, out right, out bottom); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFText_GetRect_x86(text_page, rect_index, out left, out top, out right, out bottom); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_GetBoundedText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetBoundedText")]
			internal static extern int FPDFText_GetBoundedText_x86(FPDF_TEXTPAGE text_page, double left, double top, double right, double bottom, ref byte buffer, int buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetBoundedText")]
			internal static extern int FPDFText_GetBoundedText_x64(FPDF_TEXTPAGE text_page, double left, double top, double right, double bottom, ref byte buffer, int buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetBoundedText/*'/>
		private static int FPDFText_GetBoundedText(FPDF_TEXTPAGE text_page, double left, double top, double right, double bottom, ref byte buffer, int buflen)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetBoundedText_x64(text_page, left, top, right, bottom, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetBoundedText_x86(text_page, left, top, right, bottom, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_FindStart

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_FindStart")]
			internal static extern FPDF_SCHHANDLE FPDFText_FindStart_x86(FPDF_TEXTPAGE text_page, [MarshalAs(UnmanagedType.LPWStr)] string findwhat, SearchFlags flags, int start_index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_FindStart")]
			internal static extern FPDF_SCHHANDLE FPDFText_FindStart_x64(FPDF_TEXTPAGE text_page, [MarshalAs(UnmanagedType.LPWStr)] string findwhat, SearchFlags flags, int start_index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_FindStart/*'/>
		public static FPDF_SCHHANDLE FPDFText_FindStart(FPDF_TEXTPAGE text_page, [MarshalAs(UnmanagedType.LPWStr)] string findwhat, SearchFlags flags, int start_index)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_FindStart_x64(text_page, findwhat, flags, start_index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_FindStart_x86(text_page, findwhat, flags, start_index); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_FindNext

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_FindNext")]
			internal static extern bool FPDFText_FindNext_x86(FPDF_SCHHANDLE handle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_FindNext")]
			internal static extern bool FPDFText_FindNext_x64(FPDF_SCHHANDLE handle);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_FindNext/*'/>
		public static bool FPDFText_FindNext(FPDF_SCHHANDLE handle)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_FindNext_x64(handle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_FindNext_x86(handle); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_FindPrev

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_FindPrev")]
			internal static extern bool FPDFText_FindPrev_x86(FPDF_SCHHANDLE handle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_FindPrev")]
			internal static extern bool FPDFText_FindPrev_x64(FPDF_SCHHANDLE handle);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_FindPrev/*'/>
		public static bool FPDFText_FindPrev(FPDF_SCHHANDLE handle)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_FindPrev_x64(handle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_FindPrev_x86(handle); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_GetSchResultIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetSchResultIndex")]
			internal static extern int FPDFText_GetSchResultIndex_x86(FPDF_SCHHANDLE handle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetSchResultIndex")]
			internal static extern int FPDFText_GetSchResultIndex_x64(FPDF_SCHHANDLE handle);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetSchResultIndex/*'/>
		public static int FPDFText_GetSchResultIndex(FPDF_SCHHANDLE handle)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetSchResultIndex_x64(handle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetSchResultIndex_x86(handle); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_GetSchCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetSchCount")]
			internal static extern int FPDFText_GetSchCount_x86(FPDF_SCHHANDLE handle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_GetSchCount")]
			internal static extern int FPDFText_GetSchCount_x64(FPDF_SCHHANDLE handle);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetSchCount/*'/>
		public static int FPDFText_GetSchCount(FPDF_SCHHANDLE handle)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetSchCount_x64(handle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetSchCount_x86(handle); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFText_FindClose

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_FindClose")]
			internal static extern void FPDFText_FindClose_x86(FPDF_SCHHANDLE handle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFText_FindClose")]
			internal static extern void FPDFText_FindClose_x64(FPDF_SCHHANDLE handle);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_FindClose/*'/>
		public static void FPDFText_FindClose(FPDF_SCHHANDLE handle)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFText_FindClose_x64(handle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFText_FindClose_x86(handle); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFLink_LoadWebLinks

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_LoadWebLinks")]
			internal static extern FPDF_PAGELINK FPDFLink_LoadWebLinks_x86(FPDF_TEXTPAGE text_page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_LoadWebLinks")]
			internal static extern FPDF_PAGELINK FPDFLink_LoadWebLinks_x64(FPDF_TEXTPAGE text_page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_LoadWebLinks/*'/>
		public static FPDF_PAGELINK FPDFLink_LoadWebLinks(FPDF_TEXTPAGE text_page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_LoadWebLinks_x64(text_page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_LoadWebLinks_x86(text_page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFLink_CountWebLinks

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_CountWebLinks")]
			internal static extern int FPDFLink_CountWebLinks_x86(FPDF_PAGELINK link_page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_CountWebLinks")]
			internal static extern int FPDFLink_CountWebLinks_x64(FPDF_PAGELINK link_page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_CountWebLinks/*'/>
		public static int FPDFLink_CountWebLinks(FPDF_PAGELINK link_page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_CountWebLinks_x64(link_page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_CountWebLinks_x86(link_page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFLink_GetURL

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetURL")]
			internal static extern int FPDFLink_GetURL_x86(FPDF_PAGELINK link_page, int link_index, ref byte buffer, int buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetURL")]
			internal static extern int FPDFLink_GetURL_x64(FPDF_PAGELINK link_page, int link_index, ref byte buffer, int buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetURL/*'/>
		private static int FPDFLink_GetURL(FPDF_PAGELINK link_page, int link_index, ref byte buffer, int buflen)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetURL_x64(link_page, link_index, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetURL_x86(link_page, link_index, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFLink_CountRects

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_CountRects")]
			internal static extern int FPDFLink_CountRects_x86(FPDF_PAGELINK link_page, int link_index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_CountRects")]
			internal static extern int FPDFLink_CountRects_x64(FPDF_PAGELINK link_page, int link_index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_CountRects/*'/>
		public static int FPDFLink_CountRects(FPDF_PAGELINK link_page, int link_index)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_CountRects_x64(link_page, link_index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_CountRects_x86(link_page, link_index); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFLink_GetRect

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetRect")]
			internal static extern void FPDFLink_GetRect_x86(FPDF_PAGELINK link_page, int link_index, int rect_index, out double left, out double top, out double right, out double bottom);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_GetRect")]
			internal static extern void FPDFLink_GetRect_x64(FPDF_PAGELINK link_page, int link_index, int rect_index, out double left, out double top, out double right, out double bottom);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetRect/*'/>
		public static void FPDFLink_GetRect(FPDF_PAGELINK link_page, int link_index, int rect_index, out double left, out double top, out double right, out double bottom)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFLink_GetRect_x64(link_page, link_index, rect_index, out left, out top, out right, out bottom); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFLink_GetRect_x86(link_page, link_index, rect_index, out left, out top, out right, out bottom); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFLink_CloseWebLinks

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_CloseWebLinks")]
			internal static extern void FPDFLink_CloseWebLinks_x86(FPDF_PAGELINK link_page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFLink_CloseWebLinks")]
			internal static extern void FPDFLink_CloseWebLinks_x64(FPDF_PAGELINK link_page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_CloseWebLinks/*'/>
		public static void FPDFLink_CloseWebLinks(FPDF_PAGELINK link_page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFLink_CloseWebLinks_x64(link_page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFLink_CloseWebLinks_x86(link_page); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_SetMediaBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_SetMediaBox")]
			internal static extern void FPDFPage_SetMediaBox_x86(FPDF_PAGE page, float left, float bottom, float right, float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_SetMediaBox")]
			internal static extern void FPDFPage_SetMediaBox_x64(FPDF_PAGE page, float left, float bottom, float right, float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_SetMediaBox/*'/>
		public static void FPDFPage_SetMediaBox(FPDF_PAGE page, float left, float bottom, float right, float top)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_SetMediaBox_x64(page, left, bottom, right, top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_SetMediaBox_x86(page, left, bottom, right, top); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_SetCropBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_SetCropBox")]
			internal static extern void FPDFPage_SetCropBox_x86(FPDF_PAGE page, float left, float bottom, float right, float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_SetCropBox")]
			internal static extern void FPDFPage_SetCropBox_x64(FPDF_PAGE page, float left, float bottom, float right, float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_SetCropBox/*'/>
		public static void FPDFPage_SetCropBox(FPDF_PAGE page, float left, float bottom, float right, float top)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_SetCropBox_x64(page, left, bottom, right, top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_SetCropBox_x86(page, left, bottom, right, top); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_GetMediaBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_GetMediaBox")]
			internal static extern bool FPDFPage_GetMediaBox_x86(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_GetMediaBox")]
			internal static extern bool FPDFPage_GetMediaBox_x64(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetMediaBox/*'/>
		public static bool FPDFPage_GetMediaBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetMediaBox_x64(page, out left, out bottom, out right, out top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetMediaBox_x86(page, out left, out bottom, out right, out top); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_GetCropBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_GetCropBox")]
			internal static extern bool FPDFPage_GetCropBox_x86(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_GetCropBox")]
			internal static extern bool FPDFPage_GetCropBox_x64(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetCropBox/*'/>
		public static bool FPDFPage_GetCropBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetCropBox_x64(page, out left, out bottom, out right, out top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetCropBox_x86(page, out left, out bottom, out right, out top); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_TransFormWithClip

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_TransFormWithClip")]
			internal static extern bool FPDFPage_TransFormWithClip_x86(FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipRect);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_TransFormWithClip")]
			internal static extern bool FPDFPage_TransFormWithClip_x64(FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipRect);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_TransFormWithClip/*'/>
		public static bool FPDFPage_TransFormWithClip(FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipRect)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_TransFormWithClip_x64(page, matrix, clipRect); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_TransFormWithClip_x86(page, matrix, clipRect); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPageObj_TransformClipPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPageObj_TransformClipPath")]
			internal static extern void FPDFPageObj_TransformClipPath_x86(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPageObj_TransformClipPath")]
			internal static extern void FPDFPageObj_TransformClipPath_x64(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_TransformClipPath/*'/>
		public static void FPDFPageObj_TransformClipPath(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPageObj_TransformClipPath_x64(page_object, a, b, c, d, e, f); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPageObj_TransformClipPath_x86(page_object, a, b, c, d, e, f); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_CreateClipPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_CreateClipPath")]
			internal static extern FPDF_CLIPPATH FPDF_CreateClipPath_x86(float left, float bottom, float right, float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_CreateClipPath")]
			internal static extern FPDF_CLIPPATH FPDF_CreateClipPath_x64(float left, float bottom, float right, float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_CreateClipPath/*'/>
		public static FPDF_CLIPPATH FPDF_CreateClipPath(float left, float bottom, float right, float top)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_CreateClipPath_x64(left, bottom, right, top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_CreateClipPath_x86(left, bottom, right, top); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_DestroyClipPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_DestroyClipPath")]
			internal static extern void FPDF_DestroyClipPath_x86(FPDF_CLIPPATH clipPath);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_DestroyClipPath")]
			internal static extern void FPDF_DestroyClipPath_x64(FPDF_CLIPPATH clipPath);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_DestroyClipPath/*'/>
		public static void FPDF_DestroyClipPath(FPDF_CLIPPATH clipPath)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_DestroyClipPath_x64(clipPath); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_DestroyClipPath_x86(clipPath); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_InsertClipPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_InsertClipPath")]
			internal static extern void FPDFPage_InsertClipPath_x86(FPDF_PAGE page, FPDF_CLIPPATH clipPath);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_InsertClipPath")]
			internal static extern void FPDFPage_InsertClipPath_x64(FPDF_PAGE page, FPDF_CLIPPATH clipPath);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_InsertClipPath/*'/>
		public static void FPDFPage_InsertClipPath(FPDF_PAGE page, FPDF_CLIPPATH clipPath)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_InsertClipPath_x64(page, clipPath); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_InsertClipPath_x86(page, clipPath); }
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

	}
}